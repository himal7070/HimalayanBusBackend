plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id "org.sonarqube" version "4.2.1.3168"
	id "jacoco"
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	implementation 'mysql:mysql-connector-java:8.0.33'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'

	implementation 'jakarta.validation:jakarta.validation-api:2.0.2'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

//	implementation 'com.google.oauth-client:google-oauth-client:1.33.3'
//	implementation 'com.google.auth:google-auth-library-oauth2-client:2.1.0'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

//	implementation 'io.socket:socket.io-client:1.0.0'


}



tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required =true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"*/configuration/"
			])
		}))
	}
}



sonar {
	properties {
		property "sonar.projectKey", "I356260_busticketreservationsystem_AYtw61yIcD8O0WYjuNcc"
		property "sonar.projectName", "BusTicketReservationSystem"
		property "sonar.qualitygate.wait", true
	}
}
